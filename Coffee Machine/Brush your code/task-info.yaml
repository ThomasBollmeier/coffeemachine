type: edu
custom_name: stage6
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import machine.MainKt;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(MainKt.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/Main.kt
  visible: true
  text: |-
    package machine

    import java.util.*

    fun main() {

        val scanner = Scanner(System.`in`)
        val machine = CoffeeMachine(
                money = 550,
                water = 400,
                milk = 540,
                beans = 120,
                cups = 9)

        loop@ while (true) {

            println("Write action (buy, fill, take, remaining, exit): > ")

            when (scanner.next()) {
                "buy" -> actionBuy(machine, scanner)
                "fill" -> actionFill(machine, scanner)
                "take" -> actionTake(machine)
                "remaining" -> actionRemaining(machine)
                "exit" -> break@loop
            }

        }

    }

    fun actionBuy(machine: CoffeeMachine, scanner: Scanner) {

        println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu: > ")

        when (val answer = scanner.next()) {
            "back" -> return
            else -> {
                val coffeeCode = answer.toIntOrNull() ?: return
                val coffee = machine.getCoffee(coffeeCode) ?: return
                val (ok, errorMessage) = machine.isAvailable(coffee)
                if (ok) {
                    println("I have enough resources, making you a coffee!")
                    machine.buy(coffee)
                } else {
                    println(errorMessage)
                }
            }
        }

    }

    fun actionFill(machine: CoffeeMachine, scanner: Scanner) {

        println("Write how many ml of water do you want to add: > ")
        val water = if (scanner.hasNextInt()) scanner.nextInt() else return

        println("Write how many ml of milk do you want to add: > ")
        val milk = if (scanner.hasNextInt()) scanner.nextInt() else return

        println("Write how many grams of coffee beans do you want to add: > ")
        val beans = if (scanner.hasNextInt()) scanner.nextInt() else return

        println("Write how many disposable cups of coffee do you want to add: > ")
        val cups = if (scanner.hasNextInt()) scanner.nextInt() else return

        machine.fill(water, milk, beans, cups)
    }

    fun actionTake(machine: CoffeeMachine) {
        val money = machine.take()
        println("I gave you \$$money")
    }

    fun actionRemaining(machine: CoffeeMachine) {
        println("\n" + machine.getInfoString() + "\n")
    }

    class Coffee(val price: Int,
                 val water: Int = 0,
                 val milk: Int = 0,
                 val beans: Int = 0)

    class CoffeeMachine(private var money: Int,
                        private var water: Int,
                        private var milk: Int,
                        private var beans: Int,
                        private var cups: Int) {

        private val coffees : List<Coffee> = listOf(
                Coffee(price = 4, water = 250, beans = 16), // espresso
                Coffee(price = 7, water = 350, milk = 75, beans = 20), // latte
                Coffee(price = 6, water = 200, milk = 100, beans = 12) // cappuccino
        )

        fun getCoffee(coffeeCode: Int) = coffees.getOrNull(coffeeCode - 1)

        fun buy(coffee: Coffee) {
            cups -= 1
            water -= coffee.water
            milk -= coffee.milk
            beans -= coffee.beans
            money += coffee.price
        }

        fun isAvailable(coffee: Coffee) : Pair<Boolean, String> {
            if (cups < 1) return (false to "Sorry, not enough cups!")
            if (water < coffee.water) return (false to "Sorry, not enough water!")
            if (milk < coffee.milk) return (false to "Sorry, not enough milk!")
            if (beans < coffee.beans) return (false to "Sorry, not enough beans!")
            return (true to "")
        }

        fun fill(water: Int, milk: Int, beans: Int, cups: Int) {
            this.water += water
            this.milk += milk
            this.beans += beans
            this.cups += cups
        }

        fun take() : Int {
            val money = this.money
            this.money = 0
            return money
        }

        fun getInfoString() = """The coffee machine has:
            |$water of water
            |$milk of milk
            |$beans of coffee beans
            |$cups of disposable cups
            |$money of money""".trimMargin("|")

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/67/stages/365/implement
status: Solved
record: -1
